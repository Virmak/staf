// Define a grammar

grammar Staf;

file                        :   (NL|WS)* section+ EOF;
section                     :   (imports_section | variables_section | keywords_section);

imports_header              :   IMPORTS NL+;
imports_section             :   imports_header (import_library|import_resource)+;

import_library              :   LIBRARY_IMPORT WS+ (IDENTIFIER | path);
import_resource             :   SETTINGS_RESOURCE_IMPORT WS path;

variables_header            :   VARIABLES NL+;
variables_section           :   variables_header variable_declaration+;

keywords_section            :   keywords_header NL+ keyword+;
keywords_header             :   KEYWORDS;
keyword                     :   keyword_name (keyword_setting NL+)*;
keyword_name                :   (WORD WS*)+;
keyword_setting             :   KEYWORDS_DOCS_SETTING WS+ keyword_setting_value;
keyword_setting_value       :   .*? NL+;


variable_declaration        :   variable WS+ ('='WS*)? (variable_scalar_value | variable_list_value) NL+;
variable_list_value         :   variable_scalar_value (WS+ variable_scalar_value)+ ;
variable_scalar_value       :   variable | STRING_LITERAL;

path                        :   PATH_SEPARATOR? (filename | variable) (PATH_SEPARATOR (filename | variable))*;
variable                    :   '${' variable_name '}';
variable_name               :   IDENTIFIER ('.' IDENTIFIER )* ;
filename                    :   (IDENTIFIER | '.' | '-')+;

LIBRARY_IMPORT              :   'Library';
SETTINGS_RESOURCE_IMPORT    :   'Resource';


KEYWORDS                    :    '***' WS* K E Y W O R D S WS* '***';
IMPORTS                     :    '***' WS* I M P O R T S WS* '***';
TEST_CASES                  :    T E S T ('_'| ' '+) C A S E S;
VARIABLES                   :    '***' WS* V A R I A B L E S WS* '***';


KEYWORDS_DOCS_SETTING       :   '[' D O C U M E N T A T I O N']';
KEYWORDS_TAGS_SETTING       :   '[' T A G S ']';
KEYWORDS_ARGUMENTS_SETTING  :   '[' A R G U M E N T S']';
KEYWORDS_RETURN_SETTING     :   '[' R E T U R N']';
KEYWORDS_TIMEOUT_SETTING    :   '[' T I M E O U T']';
KEYWORDS_TEARDOWN_SETTING   :   '[' T E A R D O W N']';


NL                          :   ('\r'? '\n' | '\r') -> skip;
WS                          :   [ \t]+;
TAB                         :   '\t'+;

PATH_SEPARATOR              :   '/' | '\\';


IDENTIFIER                  :   [a-zA-Z_][a-zA-Z0-9_]* ;

STRING_LITERAL              :   '"' (WORD|WS)*? '"';
WORD                        :   .+?;


fragment A:('a'|'A');
fragment B:('b'|'B');
fragment C:('c'|'C');
fragment D:('d'|'D');
fragment E:('e'|'E');
fragment F:('f'|'F');
fragment G:('g'|'G');
fragment H:('h'|'H');
fragment I:('i'|'I');
fragment J:('j'|'J');
fragment K:('k'|'K');
fragment L:('l'|'L');
fragment M:('m'|'M');
fragment N:('n'|'N');
fragment O:('o'|'O');
fragment P:('p'|'P');
fragment Q:('q'|'Q');
fragment R:('r'|'R');
fragment S:('s'|'S');
fragment T:('t'|'T');
fragment U:('u'|'U');
fragment V:('v'|'V');
fragment W:('w'|'W');
fragment X:('x'|'X');
fragment Y:('y'|'Y');
fragment Z:('z'|'Z');